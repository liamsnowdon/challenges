{
  "test-component": {
    "prefix": "test-component",
    "body": [
      "import { describe, afterEach, it, expect } from 'vitest'",
      "import { shallowMount } from '@vue/test-utils'",
      "import type { VueWrapper } from '@vue/test-utils'",
      "import ${TM_FILENAME/(.*).spec.ts$/$1/} from './${TM_FILENAME/(.*).spec.ts$/$1/}.vue'",
      "",
      "describe('${TM_FILENAME/(.*).spec.ts$/$1/}', () => {",
      "  let wrapper: VueWrapper",
      "",
      "  function mountComponent () {",
      "    wrapper = shallowMount(${TM_FILENAME/(.*).spec.ts$/$1/}, {})",
      "  }",
      "",
      "  afterEach(() => {",
      "    wrapper.unmount()",
      "  })",
      "",
      "  it('can mount', () => {",
      "    mountComponent()",
      "",
      "    expect(wrapper.exists()).toEqual(true)",
      "  })",
      "})",
      "",
    ]
  },
  "test-component-store": {
    "prefix": "test-component-store",
    "body": [
      "import { describe, afterEach, it, expect, vi } from 'vitest'",
      "import { shallowMount } from '@vue/test-utils'",
      "import type { VueWrapper } from '@vue/test-utils'",
      "import { createTestingPinia } from '@pinia/testing'",
      "import ${TM_FILENAME/(.*).spec.ts$/$1/} from './${TM_FILENAME/(.*).spec.ts$/$1/}.vue'",
      "import { useModalStore } from '~/stores/modal'",
      "",
      "describe('${TM_FILENAME/(.*).spec.ts$/$1/}', () => {",
      "  let wrapper: VueWrapper",
      "",
      "  function mountComponent () {",
      "    wrapper = shallowMount(${TM_FILENAME/(.*).spec.ts$/$1/}, {",
      "      global: {",
      "        plugins: [",
      "          createTestingPinia({",
      "            createSpy: vi.fn,",
      "          }),",
      "        ],",
      "      },",
      "    })",
      "  }",
      "",
      "  afterEach(() => {",
      "    wrapper.unmount()",
      "  })",
      "",
      "  it('can mount', () => {",
      "    mountComponent()",
      "",
      "    const modalStore = useModalStore()",
      "",
      "    expect(wrapper.exists()).toEqual(true)",
      "  })",
      "})",
      "",
    ]
  },
  "test-component-page": {
    "prefix": "test-component-page",
    "body": [
      "import { describe, afterEach, it, expect, vi } from 'vitest'",
      "import { shallowMount } from '@vue/test-utils'",
      "import type { VueWrapper } from '@vue/test-utils'",
      "import { useSeoMeta } from '@unhead/vue'",
      "import ${TM_FILENAME/(.*).spec.ts$/$1/} from './${TM_FILENAME/(.*).spec.ts$/$1/}.vue'",
      "",
      "vi.mock('@unhead/vue')",
      "",
      "describe('${TM_FILENAME/(.*).spec.ts$/$1/}', () => {",
      "  vi.mocked<any>(useSeoMeta).mockReturnValue({})",
      "",
      "  let wrapper: VueWrapper",
      "",
      "  function mountComponent () {",
      "    wrapper = shallowMount(${TM_FILENAME/(.*).spec.ts$/$1/}, {})",
      "  }",
      "",
      "  afterEach(() => {",
      "    wrapper.unmount()",
      "  })",
      "",
      "  it('can mount', () => {",
      "    mountComponent()",
      "",
      "    expect(wrapper.exists()).toEqual(true)",
      "  })",
      "",
      "  it('sets page metadata', () => {",
      "    mountComponent()",
      "",
      "    expect(useSeoMeta).toHaveBeenCalledWith({",
      "",
      "    })",
      "  })",
      "})",
      "",
    ],
  },
  "test-component-async-page": {
    "prefix": "test-component-async-page",
    "body": [
      "import { describe, afterEach, it, expect, vi } from 'vitest'",
      "import { mount } from '@vue/test-utils'",
      "import type { VueWrapper } from '@vue/test-utils'",
      "import { ref, defineComponent, nextTick } from 'vue'",
      "import { useSeoMeta } from '@unhead/vue'",
      "import ${TM_FILENAME/(.*).spec.ts$/$1/} from './${TM_FILENAME/(.*).spec.ts$/$1/}.vue'",
      "import { useFetch } from '#imports'",
      "",
      "vi.mock('@unhead/vue')",
      "",
      "vi.mock('#imports', async (importOriginal) => {",
      "  const mod = await importOriginal() as any",
      "  return {",
      "    ...mod,",
      "    useFetch: vi.fn(),",
      "  }",
      "})",
      "",
      "const component = defineComponent({",
      "  components: {",
      "    ${TM_FILENAME/(.*).spec.ts$/$1/},",
      "  },",
      "  template: '<Suspense><${TM_FILENAME/(.*).spec.ts$/$1/} /></Suspense>',",
      "})",
      "",
      "describe('${TM_FILENAME/(.*).spec.ts$/$1/}', () => {",
      "  vi.mocked<any>(useSeoMeta).mockReturnValue({})",
      "",
      "  vi.mocked<any>(useFetch).mockReturnValue({",
      "    data: ref({}),",
      "  })",
      "",
      "  let wrapper: VueWrapper",
      "",
      "  function mountComponent () {",
      "    wrapper = mount(component, {})",
      "  }",
      "",
      "  afterEach(() => {",
      "    wrapper.unmount()",
      "  })",
      "",
      "  it('can mount', () => {",
      "    mountComponent()",
      "",
      "    expect(wrapper.exists()).toEqual(true)",
      "  })",
      "",
      "  it('sets page metadata', () => {",
      "    mountComponent()",
      "",
      "    expect(useSeoMeta).toHaveBeenCalledWith({",
      "",
      "    })",
      "  })",
      "})",
      "",
    ],
  },
  "test-store": {
    "prefix": "test-store",
    "body": [
      "import { describe, beforeEach, it, expect } from 'vitest'",
      "import { setActivePinia, createPinia } from 'pinia'",
      "import { $1 } from './${TM_FILENAME/(.*).spec.ts$/$1/}'",
      "",
      "describe('$2 Store', () => {",
      "  beforeEach(() => {",
      "    setActivePinia(createPinia())",
      "  })",
      "",
      "  it('sets the default state', () => {",
      "    const store = $1()",
      "  })",
      "})",
    ],
  }
}
